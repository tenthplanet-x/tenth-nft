package com.tenth.nft.solidity;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes10;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class TpulseAcceptContract extends Contract {
    public static final String BINARY = "60806040526109c460065560046007553480156200001c57600080fd5b5060405162003b8d38038062003b8d8339810160408190526200003f9162000302565b83806200004c8162000102565b506005805460ff191690556200006460003362000114565b620000907f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a63362000114565b620000bc7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a3362000114565b50620000c83362000120565b620000d33362000120565b600692909255600755600980546001600160a01b0319166001600160a01b039092169190911790555062000561565b600462000110828262000495565b5050565b6200011082826200017a565b600580546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620001918282620001bd60201b620014931760201c565b6000828152600160209081526040909120620001b8918390620015176200025d821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000110576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002193390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000274836001600160a01b0384166200027d565b90505b92915050565b6000818152600183016020526040812054620002c65750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000277565b50600062000277565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002fd57600080fd5b919050565b600080600080608085870312156200031957600080fd5b84516001600160401b03808211156200033157600080fd5b818701915087601f8301126200034657600080fd5b8151818111156200035b576200035b620002cf565b604051601f8201601f19908116603f01168101908382118183101715620003865762000386620002cf565b81604052828152602093508a84848701011115620003a357600080fd5b600091505b82821015620003c75784820184015181830185015290830190620003a8565b82821115620003d95760008484830101525b809850505050808701519450505060408501519150620003fc60608601620002e5565b905092959194509250565b600181811c908216806200041c57607f821691505b6020821081036200043d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001b857600081815260208120601f850160051c810160208610156200046c5750805b601f850160051c820191505b818110156200048d5782815560010162000478565b505050505050565b81516001600160401b03811115620004b157620004b1620002cf565b620004c981620004c2845462000407565b8462000443565b602080601f831160018114620005015760008415620004e85750858301515b600019600386901b1c1916600185901b1785556200048d565b600085815260208120601f198616915b82811015620005325788860151825594840194600190910190840162000511565b5085821015620005515787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61361c80620005716000396000f3fe6080604052600436106101fc5760003560e01c80638da5cb5b1161010d578063d5391393116100a0578063e985e9c51161006f578063e985e9c514610626578063f242432a1461066f578063f2fde38b1461068f578063f5298aca146106af578063f5b19a82146106cf57600080fd5b8063d53913931461057e578063d547741f146105b2578063e0d50aa2146105d2578063e63ab1e9146105f257600080fd5b8063a217fddf116100dc578063a217fddf14610516578063a22cb4651461052b578063bd86a21c1461054b578063ca15c8731461055e57600080fd5b80638da5cb5b1461047f5780639010d07c146104b657806391d14854146104d65780639a30d308146104f657600080fd5b80632f2ff15d116101905780635c975abb1161015f5780635c975abb146103fd5780636b20c45414610415578063715018a614610435578063731133e91461044a5780638456cb591461046a57600080fd5b80632f2ff15d1461037b57806336568abe1461039b5780633f4ba83a146103bb5780634e1273f4146103d057600080fd5b80631f7fdffa116101cc5780631f7fdffa146102f6578063248a9ca31461031857806327bcf5a3146103485780632eb2c2d61461035b57600080fd5b8062fdd58e1461020857806301ffc9a71461023b5780630560c5ef1461026b5780630e89341c146102c957600080fd5b3661020357005b600080fd5b34801561021457600080fd5b506102286102233660046127a5565b6106ef565b6040519081526020015b60405180910390f35b34801561024757600080fd5b5061025b6102563660046127e5565b61078a565b6040519015158152602001610232565b34801561027757600080fd5b506102aa610286366004612802565b600090815260086020526040902080546001909101546001600160a01b0390911691565b604080516001600160a01b039093168352602083019190915201610232565b3480156102d557600080fd5b506102e96102e4366004612802565b610795565b6040516102329190612873565b34801561030257600080fd5b506103166103113660046129d2565b610829565b005b34801561032457600080fd5b50610228610333366004612802565b60009081526020819052604090206001015490565b610316610356366004612a6b565b610881565b34801561036757600080fd5b50610316610376366004612a83565b610b28565b34801561038757600080fd5b50610316610396366004612b2d565b610b74565b3480156103a757600080fd5b506103166103b6366004612b2d565b610b9e565b3480156103c757600080fd5b50610316610c1c565b3480156103dc57600080fd5b506103f06103eb366004612b59565b610cc2565b6040516102329190612c5f565b34801561040957600080fd5b5060055460ff1661025b565b34801561042157600080fd5b50610316610430366004612c72565b610dec565b34801561044157600080fd5b50610316610e2f565b34801561045657600080fd5b50610316610465366004612ce6565b610e41565b34801561047657600080fd5b50610316610e93565b34801561048b57600080fd5b5060055461010090046001600160a01b03165b6040516001600160a01b039091168152602001610232565b3480156104c257600080fd5b5061049e6104d1366004612d3b565b610f37565b3480156104e257600080fd5b5061025b6104f1366004612b2d565b610f56565b34801561050257600080fd5b50610316610511366004612d5d565b610f7f565b34801561052257600080fd5b50610228600081565b34801561053757600080fd5b50610316610546366004612d99565b611087565b6103166105593660046127a5565b611092565b34801561056a57600080fd5b50610228610579366004612802565b6110c8565b34801561058a57600080fd5b506102287f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b3480156105be57600080fd5b506103166105cd366004612b2d565b6110df565b3480156105de57600080fd5b506103166105ed366004612dd5565b611104565b3480156105fe57600080fd5b506102287f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b34801561063257600080fd5b5061025b610641366004612e0e565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b34801561067b57600080fd5b5061031661068a366004612e38565b611169565b34801561069b57600080fd5b506103166106aa366004612e9d565b6111ae565b3480156106bb57600080fd5b506103166106ca366004612eb8565b611227565b3480156106db57600080fd5b506103166106ea366004612eeb565b61126a565b60006001600160a01b03831661075f5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b60006107848261152c565b6060600480546107a490612efd565b80601f01602080910402602001604051908101604052809291908181526020018280546107d090612efd565b801561081d5780601f106107f25761010080835404028352916020019161081d565b820191906000526020600020905b81548152906001019060200180831161080057829003601f168201915b50505050509050919050565b6108537f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633610f56565b61086f5760405162461bcd60e51b815260040161075690612f31565b61087b8484848461156c565b50505050565b6108a76108916020830183612e9d565b60055461010090046001600160a01b0316610641565b6108f35760405162461bcd60e51b815260206004820152601e60248201527f5470756c73653a2073656c6c6572206973206e6f7420617070726f76656400006044820152606401610756565b6109236109036020830183612e9d565b3383602001358460400135604051806020016040528060008152506116c7565b6000600654600754600a6109379190613088565b6109419034613094565b61094b91906130b6565b6020808401356000908152600882526040808220815180830190925280546001600160a01b03168252600101549281018390526007549394509290919061099390600a613088565b61099d9034613094565b6109a791906130b6565b90506000816109b685346130d5565b6109c091906130d5565b90506109d86109d26020870187612e9d565b82611092565b7fb39ffb88e3ee8b5253b08d05771c3a3a82711c7d9f585f994e175a9860dfb2e0610a066020870187612e9d565b826208aa8960eb1b604051610a1d939291906130ec565b60405180910390a1600554610a409061010090046001600160a01b031685611092565b6005547fc1bcc113e4455bfe6d4e3a16e5053c9e54e01e0e864ec9db03ca9721208d76509061010090046001600160a01b0316856208aa8960eb1b604051610a8a939291906130ec565b60405180910390a18251610a9e9083611092565b82516040517fcdf223343d7ad2450c300c67a546cc8d632798514bd422cdae06267addebee2f91610ad89185906208aa8960eb1b906130ec565b60405180910390a17f5b7b9a7fcba7fc23cab485d7488e168357b320013651f078e551a2f38575c6e933346208aa8960eb1b604051610b19939291906130ec565b60405180910390a15050505050565b6001600160a01b038516331480610b445750610b448533610641565b610b605760405162461bcd60e51b815260040161075690613117565b610b6d8585858585611803565b5050505050565b600082815260208190526040902060010154610b8f816119b0565b610b9983836119ba565b505050565b6001600160a01b0381163314610c0e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610756565b610c1882826119dc565b5050565b610c467f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610f56565b610cb85760405162461bcd60e51b815260206004820152603b60248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652070617573657220726f6c6520746f20756e706175736500000000006064820152608401610756565b610cc06119fe565b565b60608151835114610d275760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610756565b6000835167ffffffffffffffff811115610d4357610d43612886565b604051908082528060200260200182016040528015610d6c578160200160208202803683370190505b50905060005b8451811015610de457610db7858281518110610d9057610d90613166565b6020026020010151858381518110610daa57610daa613166565b60200260200101516106ef565b828281518110610dc957610dc9613166565b6020908102919091010152610ddd8161317c565b9050610d72565b509392505050565b6001600160a01b038316331480610e085750610e088333610641565b610e245760405162461bcd60e51b815260040161075690613117565b610b99838383611a50565b610e37611bef565b610cc06000611c4f565b610e6b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633610f56565b610e875760405162461bcd60e51b815260040161075690612f31565b61087b84848484611ca9565b610ebd7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610f56565b610f2f5760405162461bcd60e51b815260206004820152603960248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652070617573657220726f6c6520746f207061757365000000000000006064820152608401610756565b610cc0611d94565b6000828152600160205260408120610f4f9083611dd1565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6009546040516001600160a01b038581166024830152848116604483015260648201849052600092169060840160408051601f198184030181529181526020820180516001600160e01b031663b1e0823360e01b17905251610fe19190613195565b6000604051808303816000865af19150503d806000811461101e576040519150601f19603f3d011682016040523d82523d6000602084013e611023565b606091505b505090508061087b5760405162461bcd60e51b815260206004820152602a60248201527f43616c6c206f662077657468207472616e7366657246726f6d2072657475726e6044820152691032bc31b2b83a34b7b760b11b6064820152608401610756565b610c18338383611ddd565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015610b99573d6000803e3d6000fd5b600081815260016020526040812061078490611ebd565b6000828152602081905260409020600101546110fa816119b0565b610b9983836119dc565b61111f84848460405180602001604052806000815250610e41565b6040805180820182526001600160a01b03958616815260208082019384526000958652600890529320925183546001600160a01b0319169416939093178255509051600190910155565b6001600160a01b03851633148061118557506111858533610641565b6111a15760405162461bcd60e51b815260040161075690613117565b610b6d85858585856116c7565b6111b6611bef565b6001600160a01b03811661121b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610756565b61122481611c4f565b50565b6001600160a01b03831633148061124357506112438333610641565b61125f5760405162461bcd60e51b815260040161075690613117565b610b99838383611ec7565b6000600654600754600a61127e9190613088565b61128c906060850135613094565b61129691906130b6565b6020808401356000908152600882526040808220815180830190925280546001600160a01b0316825260010154928101839052600754939450929091906112de90600a613088565b6112ec906060870135613094565b6112f691906130b6565b90506000816113098560608801356130d5565b61131391906130d5565b905060006113246020870187612e9d565b600554909150339061134690839061010090046001600160a01b031688610f7f565b6005547fc1bcc113e4455bfe6d4e3a16e5053c9e54e01e0e864ec9db03ca9721208d76509061010090046001600160a01b031687630ae8aa8960e31b604051611391939291906130ec565b60405180910390a16113a882866000015186610f7f565b84516040517fcdf223343d7ad2450c300c67a546cc8d632798514bd422cdae06267addebee2f916113e3918790630ae8aa8960e31b906130ec565b60405180910390a1611402826113fc60208a018a612e9d565b85610f7f565b7fb39ffb88e3ee8b5253b08d05771c3a3a82711c7d9f585f994e175a9860dfb2e08184630ae8aa8960e31b60405161143c939291906130ec565b60405180910390a17f5b7b9a7fcba7fc23cab485d7488e168357b320013651f078e551a2f38575c6e9828860600135630ae8aa8960e31b604051611482939291906130ec565b60405180910390a150505050505050565b61149d8282610f56565b610c18576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556114d33390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610f4f836001600160a01b038416611fe3565b60006001600160e01b03198216636cdb3d1360e11b148061155d57506001600160e01b031982166303a24d0760e21b145b80610784575061078482612032565b6001600160a01b0384166115925760405162461bcd60e51b8152600401610756906131b1565b81518351146115b35760405162461bcd60e51b8152600401610756906131f2565b336115c381600087878787612057565b60005b845181101561165f578381815181106115e1576115e1613166565b6020026020010151600260008784815181106115ff576115ff613166565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611647919061323a565b909155508190506116578161317c565b9150506115c6565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516116b0929190613252565b60405180910390a4610b6d81600087878787612065565b6001600160a01b0384166116ed5760405162461bcd60e51b815260040161075690613280565b3360006116f9856121c0565b90506000611706856121c0565b9050611716838989858589612057565b60008681526002602090815260408083206001600160a01b038c168452909152902054858110156117595760405162461bcd60e51b8152600401610756906132c5565b60008781526002602090815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061179890849061323a565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46117f8848a8a8a8a8a61220b565b505050505050505050565b81518351146118245760405162461bcd60e51b8152600401610756906131f2565b6001600160a01b03841661184a5760405162461bcd60e51b815260040161075690613280565b33611859818787878787612057565b60005b845181101561194257600085828151811061187957611879613166565b60200260200101519050600085838151811061189757611897613166565b60209081029190910181015160008481526002835260408082206001600160a01b038e1683529093529190912054909150818110156118e85760405162461bcd60e51b8152600401610756906132c5565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061192790849061323a565b925050819055505050508061193b9061317c565b905061185c565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611992929190613252565b60405180910390a46119a8818787878787612065565b505050505050565b61122481336122c6565b6119c48282611493565b6000828152600160205260409020610b999082611517565b6119e6828261232a565b6000828152600160205260409020610b99908261238f565b611a066123a4565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038316611a765760405162461bcd60e51b81526004016107569061330f565b8051825114611a975760405162461bcd60e51b8152600401610756906131f2565b6000339050611aba81856000868660405180602001604052806000815250612057565b60005b8351811015611b82576000848281518110611ada57611ada613166565b602002602001015190506000848381518110611af857611af8613166565b60209081029190910181015160008481526002835260408082206001600160a01b038c168352909352919091205490915081811015611b495760405162461bcd60e51b815260040161075690613352565b60009283526002602090815260408085206001600160a01b038b1686529091529092209103905580611b7a8161317c565b915050611abd565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611bd3929190613252565b60405180910390a460408051602081019091526000905261087b565b6005546001600160a01b03610100909104163314610cc05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610756565b600580546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038416611ccf5760405162461bcd60e51b8152600401610756906131b1565b336000611cdb856121c0565b90506000611ce8856121c0565b9050611cf983600089858589612057565b60008681526002602090815260408083206001600160a01b038b16845290915281208054879290611d2b90849061323a565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611d8b8360008989898961220b565b50505050505050565b611d9c6123ed565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a333390565b6000610f4f8383612433565b816001600160a01b0316836001600160a01b031603611e505760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610756565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000610784825490565b6001600160a01b038316611eed5760405162461bcd60e51b81526004016107569061330f565b336000611ef9846121c0565b90506000611f06846121c0565b9050611f2683876000858560405180602001604052806000815250612057565b60008581526002602090815260408083206001600160a01b038a16845290915290205484811015611f695760405162461bcd60e51b815260040161075690613352565b60008681526002602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052611d8b565b600081815260018301602052604081205461202a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610784565b506000610784565b60006001600160e01b03198216635a05180f60e01b148061078457506107848261245d565b6119a8868686868686612492565b6001600160a01b0384163b156119a85760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906120a99089908990889088908890600401613396565b6020604051808303816000875af19250505080156120e4575060408051601f3d908101601f191682019092526120e1918101906133f4565b60015b612190576120f0613411565b806308c379a003612129575061210461342d565b8061210f575061212b565b8060405162461bcd60e51b81526004016107569190612873565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610756565b6001600160e01b0319811663bc197c8160e01b14611d8b5760405162461bcd60e51b8152600401610756906134b7565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106121fa576121fa613166565b602090810291909101015292915050565b6001600160a01b0384163b156119a85760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061224f90899089908890889088906004016134ff565b6020604051808303816000875af192505050801561228a575060408051601f3d908101601f19168201909252612287918101906133f4565b60015b612296576120f0613411565b6001600160e01b0319811663f23a6e6160e01b14611d8b5760405162461bcd60e51b8152600401610756906134b7565b6122d08282610f56565b610c18576122e8816001600160a01b031660146124fa565b6122f38360206124fa565b604051602001612304929190613544565b60408051601f198184030181529082905262461bcd60e51b825261075691600401612873565b6123348282610f56565b15610c18576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610f4f836001600160a01b038416612696565b60055460ff16610cc05760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610756565b60055460ff1615610cc05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610756565b600082600001828154811061244a5761244a613166565b9060005260206000200154905092915050565b60006001600160e01b03198216637965db0b60e01b148061078457506301ffc9a760e01b6001600160e01b0319831614610784565b60055460ff16156119a85760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b6064820152608401610756565b606060006125098360026130b6565b61251490600261323a565b67ffffffffffffffff81111561252c5761252c612886565b6040519080825280601f01601f191660200182016040528015612556576020820181803683370190505b509050600360fc1b8160008151811061257157612571613166565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106125a0576125a0613166565b60200101906001600160f81b031916908160001a90535060006125c48460026130b6565b6125cf90600161323a565b90505b6001811115612647576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061260357612603613166565b1a60f81b82828151811061261957612619613166565b60200101906001600160f81b031916908160001a90535060049490941c93612640816135b9565b90506125d2565b508315610f4f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610756565b6000818152600183016020526040812054801561277f5760006126ba6001836130d5565b85549091506000906126ce906001906130d5565b90508181146127335760008660000182815481106126ee576126ee613166565b906000526020600020015490508087600001848154811061271157612711613166565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612744576127446135d0565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610784565b6000915050610784565b80356001600160a01b03811681146127a057600080fd5b919050565b600080604083850312156127b857600080fd5b6127c183612789565b946020939093013593505050565b6001600160e01b03198116811461122457600080fd5b6000602082840312156127f757600080fd5b8135610f4f816127cf565b60006020828403121561281457600080fd5b5035919050565b60005b8381101561283657818101518382015260200161281e565b8381111561087b5750506000910152565b6000815180845261285f81602086016020860161281b565b601f01601f19169290920160200192915050565b602081526000610f4f6020830184612847565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156128c2576128c2612886565b6040525050565b600067ffffffffffffffff8211156128e3576128e3612886565b5060051b60200190565b600082601f8301126128fe57600080fd5b8135602061290b826128c9565b604051612918828261289c565b83815260059390931b850182019282810191508684111561293857600080fd5b8286015b84811015612953578035835291830191830161293c565b509695505050505050565b600082601f83011261296f57600080fd5b813567ffffffffffffffff81111561298957612989612886565b6040516129a0601f8301601f19166020018261289c565b8181528460208386010111156129b557600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156129e857600080fd5b6129f185612789565b9350602085013567ffffffffffffffff80821115612a0e57600080fd5b612a1a888389016128ed565b94506040870135915080821115612a3057600080fd5b612a3c888389016128ed565b93506060870135915080821115612a5257600080fd5b50612a5f8782880161295e565b91505092959194509250565b600060608284031215612a7d57600080fd5b50919050565b600080600080600060a08688031215612a9b57600080fd5b612aa486612789565b9450612ab260208701612789565b9350604086013567ffffffffffffffff80821115612acf57600080fd5b612adb89838a016128ed565b94506060880135915080821115612af157600080fd5b612afd89838a016128ed565b93506080880135915080821115612b1357600080fd5b50612b208882890161295e565b9150509295509295909350565b60008060408385031215612b4057600080fd5b82359150612b5060208401612789565b90509250929050565b60008060408385031215612b6c57600080fd5b823567ffffffffffffffff80821115612b8457600080fd5b818501915085601f830112612b9857600080fd5b81356020612ba5826128c9565b604051612bb2828261289c565b83815260059390931b8501820192828101915089841115612bd257600080fd5b948201945b83861015612bf757612be886612789565b82529482019490820190612bd7565b96505086013592505080821115612c0d57600080fd5b50612c1a858286016128ed565b9150509250929050565b600081518084526020808501945080840160005b83811015612c5457815187529582019590820190600101612c38565b509495945050505050565b602081526000610f4f6020830184612c24565b600080600060608486031215612c8757600080fd5b612c9084612789565b9250602084013567ffffffffffffffff80821115612cad57600080fd5b612cb9878388016128ed565b93506040860135915080821115612ccf57600080fd5b50612cdc868287016128ed565b9150509250925092565b60008060008060808587031215612cfc57600080fd5b612d0585612789565b93506020850135925060408501359150606085013567ffffffffffffffff811115612d2f57600080fd5b612a5f8782880161295e565b60008060408385031215612d4e57600080fd5b50508035926020909101359150565b600080600060608486031215612d7257600080fd5b612d7b84612789565b9250612d8960208501612789565b9150604084013590509250925092565b60008060408385031215612dac57600080fd5b612db583612789565b915060208301358015158114612dca57600080fd5b809150509250929050565b60008060008060808587031215612deb57600080fd5b612df485612789565b966020860135965060408601359560600135945092505050565b60008060408385031215612e2157600080fd5b612e2a83612789565b9150612b5060208401612789565b600080600080600060a08688031215612e5057600080fd5b612e5986612789565b9450612e6760208701612789565b93506040860135925060608601359150608086013567ffffffffffffffff811115612e9157600080fd5b612b208882890161295e565b600060208284031215612eaf57600080fd5b610f4f82612789565b600080600060608486031215612ecd57600080fd5b612ed684612789565b95602085013595506040909401359392505050565b600060a08284031215612a7d57600080fd5b600181811c90821680612f1157607f821691505b602082108103612a7d57634e487b7160e01b600052602260045260246000fd5b60208082526038908201527f455243313135355072657365744d696e7465725061757365723a206d7573742060408201527f68617665206d696e74657220726f6c6520746f206d696e740000000000000000606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115612fdf578160001904821115612fc557612fc5612f8e565b80851615612fd257918102915b93841c9390800290612fa9565b509250929050565b600082612ff657506001610784565b8161300357506000610784565b816001811461301957600281146130235761303f565b6001915050610784565b60ff84111561303457613034612f8e565b50506001821b610784565b5060208310610133831016604e8410600b8410161715613062575081810a610784565b61306c8383612fa4565b806000190482111561308057613080612f8e565b029392505050565b6000610f4f8383612fe7565b6000826130b157634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156130d0576130d0612f8e565b500290565b6000828210156130e7576130e7612f8e565b500390565b6001600160a01b0393909316835260208301919091526001600160b01b031916604082015260600190565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006001820161318e5761318e612f8e565b5060010190565b600082516131a781846020870161281b565b9190910192915050565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b6000821982111561324d5761324d612f8e565b500190565b6040815260006132656040830185612c24565b82810360208401526132778185612c24565b95945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906133c290830186612c24565b82810360608401526133d48186612c24565b905082810360808401526133e88185612847565b98975050505050505050565b60006020828403121561340657600080fd5b8151610f4f816127cf565b600060033d111561342a5760046000803e5060005160e01c5b90565b600060443d101561343b5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561346b57505050505090565b82850191508151818111156134835750505050505090565b843d870101602082850101111561349d5750505050505090565b6134ac6020828601018761289c565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061353990830184612847565b979650505050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161357c81601785016020880161281b565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516135ad81602884016020880161281b565b01602801949350505050565b6000816135c8576135c8612f8e565b506000190190565b634e487b7160e01b600052603160045260246000fdfea26469706673582212200b266e99b16e7872c61c69a2582accf00457fe65d1c2ab500da65148285a0e3464736f6c634300080f0033";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_MINTER_ROLE = "MINTER_ROLE";

    public static final String FUNC_PAUSER_ROLE = "PAUSER_ROLE";

    public static final String FUNC__PAYFOR = "_payFor";

    public static final String FUNC_ACCEPT = "accept";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_BURNBATCH = "burnBatch";

    public static final String FUNC_BUY = "buy";

    public static final String FUNC_CREATORPROFILEOF = "creatorProfileOf";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GETROLEMEMBER = "getRoleMember";

    public static final String FUNC_GETROLEMEMBERCOUNT = "getRoleMemberCount";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_MINTBATCH = "mintBatch";

    public static final String FUNC_MINTWITHCREATORFEERATE = "mintWithCreatorFeeRate";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_URI = "uri";

    public static final String FUNC_WETHPAYFOR = "wethPayFor";

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event CREATORINCOME_EVENT = new Event("CreatorIncome", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes10>() {}));
    ;

    public static final Event EXPENSE_EVENT = new Event("Expense", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes10>() {}));
    ;

    public static final Event INCOME_EVENT = new Event("Income", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes10>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SERVICEINCOME_EVENT = new Event("ServiceIncome", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes10>() {}));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event URI_EVENT = new Event("URI", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected TpulseAcceptContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TpulseAcceptContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TpulseAcceptContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TpulseAcceptContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<CreatorIncomeEventResponse> getCreatorIncomeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATORINCOME_EVENT, transactionReceipt);
        ArrayList<CreatorIncomeEventResponse> responses = new ArrayList<CreatorIncomeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreatorIncomeEventResponse typedResponse = new CreatorIncomeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.currency = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CreatorIncomeEventResponse> creatorIncomeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CreatorIncomeEventResponse>() {
            @Override
            public CreatorIncomeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CREATORINCOME_EVENT, log);
                CreatorIncomeEventResponse typedResponse = new CreatorIncomeEventResponse();
                typedResponse.log = log;
                typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.currency = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CreatorIncomeEventResponse> creatorIncomeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATORINCOME_EVENT));
        return creatorIncomeEventFlowable(filter);
    }

    public List<ExpenseEventResponse> getExpenseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EXPENSE_EVENT, transactionReceipt);
        ArrayList<ExpenseEventResponse> responses = new ArrayList<ExpenseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ExpenseEventResponse typedResponse = new ExpenseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.currency = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ExpenseEventResponse> expenseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ExpenseEventResponse>() {
            @Override
            public ExpenseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EXPENSE_EVENT, log);
                ExpenseEventResponse typedResponse = new ExpenseEventResponse();
                typedResponse.log = log;
                typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.currency = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ExpenseEventResponse> expenseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXPENSE_EVENT));
        return expenseEventFlowable(filter);
    }

    public List<IncomeEventResponse> getIncomeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INCOME_EVENT, transactionReceipt);
        ArrayList<IncomeEventResponse> responses = new ArrayList<IncomeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IncomeEventResponse typedResponse = new IncomeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.currency = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<IncomeEventResponse> incomeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, IncomeEventResponse>() {
            @Override
            public IncomeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INCOME_EVENT, log);
                IncomeEventResponse typedResponse = new IncomeEventResponse();
                typedResponse.log = log;
                typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.currency = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<IncomeEventResponse> incomeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INCOME_EVENT));
        return incomeEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PausedEventResponse>() {
            @Override
            public PausedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSED_EVENT, log);
                PausedEventResponse typedResponse = new PausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleAdminChangedEventResponse>() {
            @Override
            public RoleAdminChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
                RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleGrantedEventResponse>() {
            @Override
            public RoleGrantedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEGRANTED_EVENT, log);
                RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleRevokedEventResponse>() {
            @Override
            public RoleRevokedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREVOKED_EVENT, log);
                RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public List<ServiceIncomeEventResponse> getServiceIncomeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SERVICEINCOME_EVENT, transactionReceipt);
        ArrayList<ServiceIncomeEventResponse> responses = new ArrayList<ServiceIncomeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ServiceIncomeEventResponse typedResponse = new ServiceIncomeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.currency = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ServiceIncomeEventResponse> serviceIncomeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ServiceIncomeEventResponse>() {
            @Override
            public ServiceIncomeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SERVICEINCOME_EVENT, log);
                ServiceIncomeEventResponse typedResponse = new ServiceIncomeEventResponse();
                typedResponse.log = log;
                typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.currency = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ServiceIncomeEventResponse> serviceIncomeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SERVICEINCOME_EVENT));
        return serviceIncomeEventFlowable(filter);
    }

    public List<TransferBatchEventResponse> getTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ids = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.values = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferBatchEventResponse>() {
            @Override
            public TransferBatchEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
                TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ids = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.values = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
        return transferBatchEventFlowable(filter);
    }

    public List<TransferSingleEventResponse> getTransferSingleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferSingleEventResponse>() {
            @Override
            public TransferSingleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
                TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
        return transferSingleEventFlowable(filter);
    }

    public List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(URI_EVENT, transactionReceipt);
        ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            URIEventResponse typedResponse = new URIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<URIEventResponse> uRIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, URIEventResponse>() {
            @Override
            public URIEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(URI_EVENT, log);
                URIEventResponse typedResponse = new URIEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<URIEventResponse> uRIEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(URI_EVENT));
        return uRIEventFlowable(filter);
    }

    public List<UnpausedEventResponse> getUnpausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnpausedEventResponse>() {
            @Override
            public UnpausedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSED_EVENT, log);
                UnpausedEventResponse typedResponse = new UnpausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> MINTER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINTER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> PAUSER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> _payFor(String user, BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC__PAYFOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> accept(Offer offer) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACCEPT, 
                Arrays.<Type>asList(offer), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account, BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> balanceOfBatch(List<String> accounts, List<BigInteger> ids) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(accounts, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> burn(String account, BigInteger id, BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burnBatch(String account, List<BigInteger> ids, List<BigInteger> values) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURNBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> buy(Listing listing) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUY, 
                Arrays.<Type>asList(listing), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> creatorProfileOf(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CREATORPROFILEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> getRoleMember(byte[] role, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEMEMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getRoleMemberCount(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEMEMBERCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String account, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String to, BigInteger id, BigInteger amount, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintBatch(String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintWithCreatorFeeRate(String to, BigInteger id, BigInteger amount, BigInteger creatorFeeRate) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTWITHCREATORFEERATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.Uint256(creatorFeeRate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(String from, String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger id, BigInteger amount, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> uri(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_URI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> wethPayFor(String from, String to, BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WETHPAYFOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static TpulseAcceptContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TpulseAcceptContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TpulseAcceptContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TpulseAcceptContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TpulseAcceptContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TpulseAcceptContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TpulseAcceptContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TpulseAcceptContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TpulseAcceptContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String uri, BigInteger serviceFeeRate, BigInteger ratePrecision, String wethContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(uri), 
                new org.web3j.abi.datatypes.generated.Uint256(serviceFeeRate), 
                new org.web3j.abi.datatypes.generated.Uint256(ratePrecision), 
                new org.web3j.abi.datatypes.Address(160, wethContractAddress)));
        return deployRemoteCall(TpulseAcceptContract.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<TpulseAcceptContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String uri, BigInteger serviceFeeRate, BigInteger ratePrecision, String wethContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(uri), 
                new org.web3j.abi.datatypes.generated.Uint256(serviceFeeRate), 
                new org.web3j.abi.datatypes.generated.Uint256(ratePrecision), 
                new org.web3j.abi.datatypes.Address(160, wethContractAddress)));
        return deployRemoteCall(TpulseAcceptContract.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TpulseAcceptContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String uri, BigInteger serviceFeeRate, BigInteger ratePrecision, String wethContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(uri), 
                new org.web3j.abi.datatypes.generated.Uint256(serviceFeeRate), 
                new org.web3j.abi.datatypes.generated.Uint256(ratePrecision), 
                new org.web3j.abi.datatypes.Address(160, wethContractAddress)));
        return deployRemoteCall(TpulseAcceptContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TpulseAcceptContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String uri, BigInteger serviceFeeRate, BigInteger ratePrecision, String wethContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(uri), 
                new org.web3j.abi.datatypes.generated.Uint256(serviceFeeRate), 
                new org.web3j.abi.datatypes.generated.Uint256(ratePrecision), 
                new org.web3j.abi.datatypes.Address(160, wethContractAddress)));
        return deployRemoteCall(TpulseAcceptContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class Offer extends StaticStruct {
        public String from;

        public BigInteger assetsId;

        public BigInteger quantity;

        public BigInteger price;

        public BigInteger expireAt;

        public Offer(String from, BigInteger assetsId, BigInteger quantity, BigInteger price, BigInteger expireAt) {
            super(new org.web3j.abi.datatypes.Address(from),new org.web3j.abi.datatypes.generated.Uint256(assetsId),new org.web3j.abi.datatypes.generated.Uint32(quantity),new org.web3j.abi.datatypes.generated.Uint256(price),new org.web3j.abi.datatypes.generated.Uint64(expireAt));
            this.from = from;
            this.assetsId = assetsId;
            this.quantity = quantity;
            this.price = price;
            this.expireAt = expireAt;
        }

        public Offer(Address from, Uint256 assetsId, Uint32 quantity, Uint256 price, Uint64 expireAt) {
            super(from,assetsId,quantity,price,expireAt);
            this.from = from.getValue();
            this.assetsId = assetsId.getValue();
            this.quantity = quantity.getValue();
            this.price = price.getValue();
            this.expireAt = expireAt.getValue();
        }
    }

    public static class Listing extends StaticStruct {
        public String seller;

        public BigInteger assetsId;

        public BigInteger quality;

        public Listing(String seller, BigInteger assetsId, BigInteger quality) {
            super(new org.web3j.abi.datatypes.Address(seller),new org.web3j.abi.datatypes.generated.Uint256(assetsId),new org.web3j.abi.datatypes.generated.Uint256(quality));
            this.seller = seller;
            this.assetsId = assetsId;
            this.quality = quality;
        }

        public Listing(Address seller, Uint256 assetsId, Uint256 quality) {
            super(seller,assetsId,quality);
            this.seller = seller.getValue();
            this.assetsId = assetsId.getValue();
            this.quality = quality.getValue();
        }
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String account;

        public String operator;

        public Boolean approved;
    }

    public static class CreatorIncomeEventResponse extends BaseEventResponse {
        public String receiver;

        public BigInteger value;

        public byte[] currency;
    }

    public static class ExpenseEventResponse extends BaseEventResponse {
        public String receiver;

        public BigInteger value;

        public byte[] currency;
    }

    public static class IncomeEventResponse extends BaseEventResponse {
        public String receiver;

        public BigInteger value;

        public byte[] currency;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class ServiceIncomeEventResponse extends BaseEventResponse {
        public String receiver;

        public BigInteger value;

        public byte[] currency;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ids;

        public List<BigInteger> values;
    }

    public static class TransferSingleEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public BigInteger id;

        public BigInteger value;
    }

    public static class URIEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String value;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }
}
