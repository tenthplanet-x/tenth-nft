package com.tenth.nft.solidity;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes10;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class TpulseContract extends Contract {
    public static final String BINARY = "60806040526109c46007553480156200001757600080fd5b5060405162003b4438038062003b448339810160408190526200003a91620002d2565b82806200004733620000fa565b62000052816200014a565b506006805460ff191690556200006a6000336200015c565b620000967f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6336200015c565b620000c27f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336200015c565b50620000ce33620000fa565b600791909155600980546001600160a01b0319166001600160a01b039092169190911790555062000527565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60056200015882826200045b565b5050565b620001588282620001798282620001a560201b620013d11760201c565b6000828152600260209081526040909120620001a09183906200143c6200022d821b17901c565b505050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620001585760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b600062000244836001600160a01b0384166200024d565b90505b92915050565b6000818152600183016020526040812054620002965750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000247565b50600062000247565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002cd57600080fd5b919050565b600080600060608486031215620002e857600080fd5b83516001600160401b03808211156200030057600080fd5b818601915086601f8301126200031557600080fd5b8151818111156200032a576200032a6200029f565b604051601f8201601f19908116603f011681019083821181831017156200035557620003556200029f565b816040528281526020935089848487010111156200037257600080fd5b600091505b8282101562000396578482018401518183018501529083019062000377565b82821115620003a85760008484830101525b8097505050508086015193505050620003c460408501620002b5565b90509250925092565b600181811c90821680620003e257607f821691505b6020821081036200040357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001a057600081815260208120601f850160051c81016020861015620004325750805b601f850160051c820191505b8181101562000453578281556001016200043e565b505050505050565b81516001600160401b038111156200047757620004776200029f565b6200048f81620004888454620003cd565b8462000409565b602080601f831160018114620004c75760008415620004ae5750858301515b600019600386901b1c1916600185901b17855562000453565b600085815260208120601f198616915b82811015620004f857888601518255948401946001909101908401620004d7565b5085821015620005175787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61360d80620005376000396000f3fe6080604052600436106102125760003560e01c8063731133e911610118578063d547741f116100a0578063e985e9c51161006f578063e985e9c5146106a2578063f242432a146106c2578063f2fde38b146106e2578063f5298aca14610702578063f74e1f451461072257600080fd5b8063d547741f1461061b578063db9254a51461063b578063e0d50aa21461064e578063e63ab1e91461066e57600080fd5b806391d14854116100e757806391d1485414610572578063a217fddf14610592578063a22cb465146105a7578063ca15c873146105c7578063d5391393146105e757600080fd5b8063731133e9146104eb5780638456cb591461050b5780638da5cb5b146105205780639010d07c1461055257600080fd5b80632f2ff15d1161019b57806352b526931161016a57806352b52693146104375780635a604c52146104775780635c975abb1461049e5780636b20c454146104b6578063715018a6146104d657600080fd5b80632f2ff15d146103b557806336568abe146103d55780633f4ba83a146103f55780634e1273f41461040a57600080fd5b80630e89341c116101e25780630e89341c146102f557806319041f5a146103225780631f7fdffa14610344578063248a9ca3146103645780632eb2c2d61461039557600080fd5b8062fdd58e1461021e57806301ffc9a7146102515780630560c5ef14610281578063097e7053146102df57600080fd5b3661021957005b600080fd5b34801561022a57600080fd5b5061023e6102393660046127e9565b610742565b6040519081526020015b60405180910390f35b34801561025d57600080fd5b5061027161026c366004612829565b6107dd565b6040519015158152602001610248565b34801561028d57600080fd5b506102c061029c366004612846565b600090815260086020526040902080546001909101546001600160a01b0390911691565b604080516001600160a01b039093168352602083019190915201610248565b3480156102eb57600080fd5b5061023e60075481565b34801561030157600080fd5b50610315610310366004612846565b6107e8565b60405161024891906128b7565b34801561032e57600080fd5b5061034261033d3660046128ca565b61087c565b005b34801561035057600080fd5b5061034261035f366004612a4f565b610ab2565b34801561037057600080fd5b5061023e61037f366004612846565b6000908152600160208190526040909120015490565b3480156103a157600080fd5b506103426103b0366004612ae8565b610b0a565b3480156103c157600080fd5b506103426103d0366004612b92565b610b56565b3480156103e157600080fd5b506103426103f0366004612b92565b610b81565b34801561040157600080fd5b50610342610bff565b34801561041657600080fd5b5061042a610425366004612bbe565b610ca5565b6040516102489190612cc4565b34801561044357600080fd5b506102c0610452366004612846565b600860205260009081526040902080546001909101546001600160a01b039091169082565b34801561048357600080fd5b5061048c600481565b60405160ff9091168152602001610248565b3480156104aa57600080fd5b5060065460ff16610271565b3480156104c257600080fd5b506103426104d1366004612cd7565b610dcf565b3480156104e257600080fd5b50610342610e12565b3480156104f757600080fd5b50610342610506366004612d4b565b610e24565b34801561051757600080fd5b50610342610e76565b34801561052c57600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610248565b34801561055e57600080fd5b5061053a61056d366004612da0565b610f1a565b34801561057e57600080fd5b5061027161058d366004612b92565b610f39565b34801561059e57600080fd5b5061023e600081565b3480156105b357600080fd5b506103426105c2366004612dd0565b610f64565b3480156105d357600080fd5b5061023e6105e2366004612846565b610f6f565b3480156105f357600080fd5b5061023e7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b34801561062757600080fd5b50610342610636366004612b92565b610f86565b610342610649366004612e07565b610fac565b34801561065a57600080fd5b506103426106693660046128ca565b61123d565b34801561067a57600080fd5b5061023e7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b3480156106ae57600080fd5b506102716106bd366004612e3a565b6112a2565b3480156106ce57600080fd5b506103426106dd366004612e64565b6112d0565b3480156106ee57600080fd5b506103426106fd366004612ec9565b611315565b34801561070e57600080fd5b5061034261071d366004612e07565b61138e565b34801561072e57600080fd5b5060095461053a906001600160a01b031681565b60006001600160a01b0383166107b25760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526003602090815260408083206001600160a01b03861684529091529020545b92915050565b60006107d782611451565b6060600580546107f790612ee4565b80601f016020809104026020016040519081016040528092919081815260200182805461082390612ee4565b80156108705780601f1061084557610100808354040283529160200191610870565b820191906000526020600020905b81548152906001019060200180831161085357829003601f168201915b50505050509050919050565b3361088781306112a2565b6108d35760405162461bcd60e51b815260206004820152601b60248201527f5b6275795d73656c6c6572206973206e6f7420617070726f766564000000000060448201526064016107a9565b6108ef8186868660405180602001604052806000815250611491565b6000610903836108fe60075490565b6115cd565b905060008061093087600090815260086020526040902080546001909101546001600160a01b0390911691565b91509150600061094086836115cd565b905060008161094f8689612f34565b6109599190612f34565b90506109778a6109716000546001600160a01b031690565b87611607565b7fc1bcc113e4455bfe6d4e3a16e5053c9e54e01e0e864ec9db03ca9721208d76506109aa6000546001600160a01b031690565b86630ae8aa8960e31b6040516109c293929190612f4b565b60405180910390a16109d58a8584611607565b7fcdf223343d7ad2450c300c67a546cc8d632798514bd422cdae06267addebee2f8483630ae8aa8960e31b604051610a0f93929190612f4b565b60405180910390a1610a228a8783611607565b7fb39ffb88e3ee8b5253b08d05771c3a3a82711c7d9f585f994e175a9860dfb2e08682630ae8aa8960e31b604051610a5c93929190612f4b565b60405180910390a17f5b7b9a7fcba7fc23cab485d7488e168357b320013651f078e551a2f38575c6e98a88630ae8aa8960e31b604051610a9e93929190612f4b565b60405180910390a150505050505050505050565b610adc7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633610f39565b610af85760405162461bcd60e51b81526004016107a990612f76565b610b04848484846116fa565b50505050565b6001600160a01b038516331480610b265750610b2685336112a2565b610b425760405162461bcd60e51b81526004016107a990612fd3565b610b4f8585858585611855565b5050505050565b60008281526001602081905260409091200154610b7281611a02565b610b7c8383611a0c565b505050565b6001600160a01b0381163314610bf15760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016107a9565b610bfb8282611a2e565b5050565b610c297f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610f39565b610c9b5760405162461bcd60e51b815260206004820152603b60248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652070617573657220726f6c6520746f20756e7061757365000000000060648201526084016107a9565b610ca3611a50565b565b60608151835114610d0a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016107a9565b6000835167ffffffffffffffff811115610d2657610d26612903565b604051908082528060200260200182016040528015610d4f578160200160208202803683370190505b50905060005b8451811015610dc757610d9a858281518110610d7357610d73613022565b6020026020010151858381518110610d8d57610d8d613022565b6020026020010151610742565b828281518110610dac57610dac613022565b6020908102919091010152610dc081613038565b9050610d55565b509392505050565b6001600160a01b038316331480610deb5750610deb83336112a2565b610e075760405162461bcd60e51b81526004016107a990612fd3565b610b7c838383611aa2565b610e1a611c41565b610ca36000611c9b565b610e4e7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633610f39565b610e6a5760405162461bcd60e51b81526004016107a990612f76565b610b0484848484611ceb565b610ea07f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610f39565b610f125760405162461bcd60e51b815260206004820152603960248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652070617573657220726f6c6520746f2070617573650000000000000060648201526084016107a9565b610ca3611dd6565b6000828152600260205260408120610f329083611e13565b9392505050565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610bfb338383611e1f565b60008181526002602052604081206107d790611eff565b60008281526001602081905260409091200154610fa281611a02565b610b7c8383611a2e565b3334610fb885306112a2565b6110045760405162461bcd60e51b815260206004820152601b60248201527f5b6275795d73656c6c6572206973206e6f7420617070726f766564000000000060448201526064016107a9565b6110208583868660405180602001604052806000815250611491565b600061102f826108fe60075490565b905060008061105c87600090815260086020526040902080546001909101546001600160a01b0390911691565b91509150600061106c85836115cd565b905060008161107b8688612f34565b6110859190612f34565b6040519091506001600160a01b038b169082156108fc029083906000818181858888f193505050501580156110be573d6000803e3d6000fd5b507fb39ffb88e3ee8b5253b08d05771c3a3a82711c7d9f585f994e175a9860dfb2e08a826208aa8960eb1b6040516110f893929190612f4b565b60405180910390a1600080546040516001600160a01b039091169187156108fc02918891818181858888f19350505050158015611139573d6000803e3d6000fd5b507fc1bcc113e4455bfe6d4e3a16e5053c9e54e01e0e864ec9db03ca9721208d765061116d6000546001600160a01b031690565b866208aa8960eb1b60405161118493929190612f4b565b60405180910390a16040516001600160a01b0385169083156108fc029084906000818181858888f193505050501580156111c2573d6000803e3d6000fd5b507fcdf223343d7ad2450c300c67a546cc8d632798514bd422cdae06267addebee2f84836208aa8960eb1b6040516111fc93929190612f4b565b60405180910390a17f5b7b9a7fcba7fc23cab485d7488e168357b320013651f078e551a2f38575c6e987876208aa8960eb1b604051610a9e93929190612f4b565b61125884848460405180602001604052806000815250610e24565b6040805180820182526001600160a01b03958616815260208082019384526000958652600890529320925183546001600160a01b0319169416939093178255509051600190910155565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b6001600160a01b0385163314806112ec57506112ec85336112a2565b6113085760405162461bcd60e51b81526004016107a990612fd3565b610b4f8585858585611491565b61131d611c41565b6001600160a01b0381166113825760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107a9565b61138b81611c9b565b50565b6001600160a01b0383163314806113aa57506113aa83336112a2565b6113c65760405162461bcd60e51b81526004016107a990612fd3565b610b7c838383611f09565b6113db8282610f39565b610bfb5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6000610f32836001600160a01b038416612025565b60006001600160e01b03198216636cdb3d1360e11b148061148257506001600160e01b031982166303a24d0760e21b145b806107d757506107d782612074565b6001600160a01b0384166114b75760405162461bcd60e51b81526004016107a990613051565b3360006114c385612099565b905060006114d085612099565b90506114e08389898585896120e4565b60008681526003602090815260408083206001600160a01b038c168452909152902054858110156115235760405162461bcd60e51b81526004016107a990613096565b60008781526003602090815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906115629084906130e0565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46115c2848a8a8a8a8a6120f2565b505050505050505050565b6000816000036115df575060006107d7565b816115ec6004600a6131dc565b6115f690856131eb565b611600919061320d565b90506107d7565b600061161b6009546001600160a01b031690565b6040516323b872dd60e01b81526001600160a01b03868116600483015285811660248301526044820185905291909116906323b872dd906064016020604051808303816000875af1158015611674573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611698919061322c565b905080610b045760405162461bcd60e51b815260206004820152602a60248201527f43616c6c206f662077657468207472616e7366657246726f6d2072657475726e6044820152691032bc31b2b83a34b7b760b11b60648201526084016107a9565b6001600160a01b0384166117205760405162461bcd60e51b81526004016107a990613249565b81518351146117415760405162461bcd60e51b81526004016107a99061328a565b33611751816000878787876120e4565b60005b84518110156117ed5783818151811061176f5761176f613022565b60200260200101516003600087848151811061178d5761178d613022565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546117d591906130e0565b909155508190506117e581613038565b915050611754565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161183e9291906132d2565b60405180910390a4610b4f8160008787878761224d565b81518351146118765760405162461bcd60e51b81526004016107a99061328a565b6001600160a01b03841661189c5760405162461bcd60e51b81526004016107a990613051565b336118ab8187878787876120e4565b60005b84518110156119945760008582815181106118cb576118cb613022565b6020026020010151905060008583815181106118e9576118e9613022565b60209081029190910181015160008481526003835260408082206001600160a01b038e16835290935291909120549091508181101561193a5760405162461bcd60e51b81526004016107a990613096565b60008381526003602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906119799084906130e0565b925050819055505050508061198d90613038565b90506118ae565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516119e49291906132d2565b60405180910390a46119fa81878787878761224d565b505050505050565b61138b8133612308565b611a1682826113d1565b6000828152600260205260409020610b7c908261143c565b611a38828261236c565b6000828152600260205260409020610b7c90826123d3565b611a586123e8565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038316611ac85760405162461bcd60e51b81526004016107a990613300565b8051825114611ae95760405162461bcd60e51b81526004016107a99061328a565b6000339050611b0c818560008686604051806020016040528060008152506120e4565b60005b8351811015611bd4576000848281518110611b2c57611b2c613022565b602002602001015190506000848381518110611b4a57611b4a613022565b60209081029190910181015160008481526003835260408082206001600160a01b038c168352909352919091205490915081811015611b9b5760405162461bcd60e51b81526004016107a990613343565b60009283526003602090815260408085206001600160a01b038b1686529091529092209103905580611bcc81613038565b915050611b0f565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611c259291906132d2565b60405180910390a4604080516020810190915260009052610b04565b6000546001600160a01b03163314610ca35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107a9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038416611d115760405162461bcd60e51b81526004016107a990613249565b336000611d1d85612099565b90506000611d2a85612099565b9050611d3b836000898585896120e4565b60008681526003602090815260408083206001600160a01b038b16845290915281208054879290611d6d9084906130e0565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611dcd836000898989896120f2565b50505050505050565b611dde612431565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a853390565b6000610f328383612477565b816001600160a01b0316836001600160a01b031603611e925760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016107a9565b6001600160a01b03838116600081815260046020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60006107d7825490565b6001600160a01b038316611f2f5760405162461bcd60e51b81526004016107a990613300565b336000611f3b84612099565b90506000611f4884612099565b9050611f68838760008585604051806020016040528060008152506120e4565b60008581526003602090815260408083206001600160a01b038a16845290915290205484811015611fab5760405162461bcd60e51b81526004016107a990613343565b60008681526003602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052611dcd565b600081815260018301602052604081205461206c575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107d7565b5060006107d7565b60006001600160e01b03198216635a05180f60e01b14806107d757506107d7826124a1565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106120d3576120d3613022565b602090810291909101015292915050565b6119fa8686868686866124d6565b6001600160a01b0384163b156119fa5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906121369089908990889088908890600401613387565b6020604051808303816000875af1925050508015612171575060408051601f3d908101601f1916820190925261216e918101906133cc565b60015b61221d5761217d6133e9565b806308c379a0036121b65750612191613405565b8061219c57506121b8565b8060405162461bcd60e51b81526004016107a991906128b7565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016107a9565b6001600160e01b0319811663f23a6e6160e01b14611dcd5760405162461bcd60e51b81526004016107a99061348f565b6001600160a01b0384163b156119fa5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061229190899089908890889088906004016134d7565b6020604051808303816000875af19250505080156122cc575060408051601f3d908101601f191682019092526122c9918101906133cc565b60015b6122d85761217d6133e9565b6001600160e01b0319811663bc197c8160e01b14611dcd5760405162461bcd60e51b81526004016107a99061348f565b6123128282610f39565b610bfb5761232a816001600160a01b0316601461253e565b61233583602061253e565b604051602001612346929190613535565b60408051601f198184030181529082905262461bcd60e51b82526107a9916004016128b7565b6123768282610f39565b15610bfb5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610f32836001600160a01b0384166126da565b60065460ff16610ca35760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107a9565b60065460ff1615610ca35760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016107a9565b600082600001828154811061248e5761248e613022565b9060005260206000200154905092915050565b60006001600160e01b03198216637965db0b60e01b14806107d757506301ffc9a760e01b6001600160e01b03198316146107d7565b60065460ff16156119fa5760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b60648201526084016107a9565b6060600061254d83600261320d565b6125589060026130e0565b67ffffffffffffffff81111561257057612570612903565b6040519080825280601f01601f19166020018201604052801561259a576020820181803683370190505b509050600360fc1b816000815181106125b5576125b5613022565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106125e4576125e4613022565b60200101906001600160f81b031916908160001a905350600061260884600261320d565b6126139060016130e0565b90505b600181111561268b576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061264757612647613022565b1a60f81b82828151811061265d5761265d613022565b60200101906001600160f81b031916908160001a90535060049490941c93612684816135aa565b9050612616565b508315610f325760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107a9565b600081815260018301602052604081205480156127c35760006126fe600183612f34565b855490915060009061271290600190612f34565b905081811461277757600086600001828154811061273257612732613022565b906000526020600020015490508087600001848154811061275557612755613022565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612788576127886135c1565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107d7565b60009150506107d7565b80356001600160a01b03811681146127e457600080fd5b919050565b600080604083850312156127fc57600080fd5b612805836127cd565b946020939093013593505050565b6001600160e01b03198116811461138b57600080fd5b60006020828403121561283b57600080fd5b8135610f3281612813565b60006020828403121561285857600080fd5b5035919050565b60005b8381101561287a578181015183820152602001612862565b83811115610b045750506000910152565b600081518084526128a381602086016020860161285f565b601f01601f19169290920160200192915050565b602081526000610f32602083018461288b565b600080600080608085870312156128e057600080fd5b6128e9856127cd565b966020860135965060408601359560600135945092505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561293f5761293f612903565b6040525050565b600067ffffffffffffffff82111561296057612960612903565b5060051b60200190565b600082601f83011261297b57600080fd5b8135602061298882612946565b6040516129958282612919565b83815260059390931b85018201928281019150868411156129b557600080fd5b8286015b848110156129d057803583529183019183016129b9565b509695505050505050565b600082601f8301126129ec57600080fd5b813567ffffffffffffffff811115612a0657612a06612903565b604051612a1d601f8301601f191660200182612919565b818152846020838601011115612a3257600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215612a6557600080fd5b612a6e856127cd565b9350602085013567ffffffffffffffff80821115612a8b57600080fd5b612a978883890161296a565b94506040870135915080821115612aad57600080fd5b612ab98883890161296a565b93506060870135915080821115612acf57600080fd5b50612adc878288016129db565b91505092959194509250565b600080600080600060a08688031215612b0057600080fd5b612b09866127cd565b9450612b17602087016127cd565b9350604086013567ffffffffffffffff80821115612b3457600080fd5b612b4089838a0161296a565b94506060880135915080821115612b5657600080fd5b612b6289838a0161296a565b93506080880135915080821115612b7857600080fd5b50612b85888289016129db565b9150509295509295909350565b60008060408385031215612ba557600080fd5b82359150612bb5602084016127cd565b90509250929050565b60008060408385031215612bd157600080fd5b823567ffffffffffffffff80821115612be957600080fd5b818501915085601f830112612bfd57600080fd5b81356020612c0a82612946565b604051612c178282612919565b83815260059390931b8501820192828101915089841115612c3757600080fd5b948201945b83861015612c5c57612c4d866127cd565b82529482019490820190612c3c565b96505086013592505080821115612c7257600080fd5b50612c7f8582860161296a565b9150509250929050565b600081518084526020808501945080840160005b83811015612cb957815187529582019590820190600101612c9d565b509495945050505050565b602081526000610f326020830184612c89565b600080600060608486031215612cec57600080fd5b612cf5846127cd565b9250602084013567ffffffffffffffff80821115612d1257600080fd5b612d1e8783880161296a565b93506040860135915080821115612d3457600080fd5b50612d418682870161296a565b9150509250925092565b60008060008060808587031215612d6157600080fd5b612d6a856127cd565b93506020850135925060408501359150606085013567ffffffffffffffff811115612d9457600080fd5b612adc878288016129db565b60008060408385031215612db357600080fd5b50508035926020909101359150565b801515811461138b57600080fd5b60008060408385031215612de357600080fd5b612dec836127cd565b91506020830135612dfc81612dc2565b809150509250929050565b600080600060608486031215612e1c57600080fd5b612e25846127cd565b95602085013595506040909401359392505050565b60008060408385031215612e4d57600080fd5b612e56836127cd565b9150612bb5602084016127cd565b600080600080600060a08688031215612e7c57600080fd5b612e85866127cd565b9450612e93602087016127cd565b93506040860135925060608601359150608086013567ffffffffffffffff811115612ebd57600080fd5b612b85888289016129db565b600060208284031215612edb57600080fd5b610f32826127cd565b600181811c90821680612ef857607f821691505b602082108103612f1857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015612f4657612f46612f1e565b500390565b6001600160a01b0393909316835260208301919091526001600160c01b031916604082015260600190565b60208082526038908201527f455243313135355072657365744d696e7465725061757365723a206d7573742060408201527f68617665206d696e74657220726f6c6520746f206d696e740000000000000000606082015260800190565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006001820161304a5761304a612f1e565b5060010190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b600082198211156130f3576130f3612f1e565b500190565b600181815b8085111561313357816000190482111561311957613119612f1e565b8085161561312657918102915b93841c93908002906130fd565b509250929050565b60008261314a575060016107d7565b81613157575060006107d7565b816001811461316d576002811461317757613193565b60019150506107d7565b60ff84111561318857613188612f1e565b50506001821b6107d7565b5060208310610133831016604e8410600b84101617156131b6575081810a6107d7565b6131c083836130f8565b80600019048211156131d4576131d4612f1e565b029392505050565b6000610f3260ff84168361313b565b60008261320857634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561322757613227612f1e565b500290565b60006020828403121561323e57600080fd5b8151610f3281612dc2565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b6040815260006132e56040830185612c89565b82810360208401526132f78185612c89565b95945050505050565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906133c19083018461288b565b979650505050505050565b6000602082840312156133de57600080fd5b8151610f3281612813565b600060033d11156134025760046000803e5060005160e01c5b90565b600060443d10156134135790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561344357505050505090565b828501915081518181111561345b5750505050505090565b843d87010160208285010111156134755750505050505090565b61348460208286010187612919565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061350390830186612c89565b82810360608401526135158186612c89565b90508281036080840152613529818561288b565b98975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161356d81601785016020880161285f565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161359e81602884016020880161285f565b01602801949350505050565b6000816135b9576135b9612f1e565b506000190190565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220d267804cc192438cdcb19da8a21c35a750d74900a78c4900807dd1769916369564736f6c634300080f0033";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_MINTER_ROLE = "MINTER_ROLE";

    public static final String FUNC_PAUSER_ROLE = "PAUSER_ROLE";

    public static final String FUNC_RATE_DECIMALS = "RATE_DECIMALS";

    public static final String FUNC__BUY = "_buy";

    public static final String FUNC__CREATORPROFILES = "_creatorProfiles";

    public static final String FUNC__SERVICEFEERATE = "_serviceFeeRate";

    public static final String FUNC__WETHCONTRACTADDRESS = "_wethContractAddress";

    public static final String FUNC_ACCEPT = "accept";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_BURNBATCH = "burnBatch";

    public static final String FUNC_CREATORPROFILEOF = "creatorProfileOf";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GETROLEMEMBER = "getRoleMember";

    public static final String FUNC_GETROLEMEMBERCOUNT = "getRoleMemberCount";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_MINTBATCH = "mintBatch";

    public static final String FUNC_MINTWITHCREATORFEERATE = "mintWithCreatorFeeRate";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_URI = "uri";

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event CREATORINCOME_EVENT = new Event("CreatorIncome", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes10>() {}));
    ;

    public static final Event EXPENSE_EVENT = new Event("Expense", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes10>() {}));
    ;

    public static final Event INCOME_EVENT = new Event("Income", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes10>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SERVICEINCOME_EVENT = new Event("ServiceIncome", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes10>() {}));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event URI_EVENT = new Event("URI", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected TpulseContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TpulseContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TpulseContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TpulseContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<CreatorIncomeEventResponse> getCreatorIncomeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATORINCOME_EVENT, transactionReceipt);
        ArrayList<CreatorIncomeEventResponse> responses = new ArrayList<CreatorIncomeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreatorIncomeEventResponse typedResponse = new CreatorIncomeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.currency = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CreatorIncomeEventResponse> creatorIncomeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CreatorIncomeEventResponse>() {
            @Override
            public CreatorIncomeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CREATORINCOME_EVENT, log);
                CreatorIncomeEventResponse typedResponse = new CreatorIncomeEventResponse();
                typedResponse.log = log;
                typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.currency = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CreatorIncomeEventResponse> creatorIncomeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATORINCOME_EVENT));
        return creatorIncomeEventFlowable(filter);
    }

    public List<ExpenseEventResponse> getExpenseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EXPENSE_EVENT, transactionReceipt);
        ArrayList<ExpenseEventResponse> responses = new ArrayList<ExpenseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ExpenseEventResponse typedResponse = new ExpenseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.currency = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ExpenseEventResponse> expenseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ExpenseEventResponse>() {
            @Override
            public ExpenseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EXPENSE_EVENT, log);
                ExpenseEventResponse typedResponse = new ExpenseEventResponse();
                typedResponse.log = log;
                typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.currency = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ExpenseEventResponse> expenseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXPENSE_EVENT));
        return expenseEventFlowable(filter);
    }

    public List<IncomeEventResponse> getIncomeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INCOME_EVENT, transactionReceipt);
        ArrayList<IncomeEventResponse> responses = new ArrayList<IncomeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IncomeEventResponse typedResponse = new IncomeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.currency = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<IncomeEventResponse> incomeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, IncomeEventResponse>() {
            @Override
            public IncomeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INCOME_EVENT, log);
                IncomeEventResponse typedResponse = new IncomeEventResponse();
                typedResponse.log = log;
                typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.currency = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<IncomeEventResponse> incomeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INCOME_EVENT));
        return incomeEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PausedEventResponse>() {
            @Override
            public PausedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSED_EVENT, log);
                PausedEventResponse typedResponse = new PausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleAdminChangedEventResponse>() {
            @Override
            public RoleAdminChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
                RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleGrantedEventResponse>() {
            @Override
            public RoleGrantedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEGRANTED_EVENT, log);
                RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleRevokedEventResponse>() {
            @Override
            public RoleRevokedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREVOKED_EVENT, log);
                RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public List<ServiceIncomeEventResponse> getServiceIncomeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SERVICEINCOME_EVENT, transactionReceipt);
        ArrayList<ServiceIncomeEventResponse> responses = new ArrayList<ServiceIncomeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ServiceIncomeEventResponse typedResponse = new ServiceIncomeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.currency = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ServiceIncomeEventResponse> serviceIncomeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ServiceIncomeEventResponse>() {
            @Override
            public ServiceIncomeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SERVICEINCOME_EVENT, log);
                ServiceIncomeEventResponse typedResponse = new ServiceIncomeEventResponse();
                typedResponse.log = log;
                typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.currency = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ServiceIncomeEventResponse> serviceIncomeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SERVICEINCOME_EVENT));
        return serviceIncomeEventFlowable(filter);
    }

    public List<TransferBatchEventResponse> getTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ids = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.values = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferBatchEventResponse>() {
            @Override
            public TransferBatchEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
                TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ids = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.values = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
        return transferBatchEventFlowable(filter);
    }

    public List<TransferSingleEventResponse> getTransferSingleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferSingleEventResponse>() {
            @Override
            public TransferSingleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
                TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
        return transferSingleEventFlowable(filter);
    }

    public List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(URI_EVENT, transactionReceipt);
        ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            URIEventResponse typedResponse = new URIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<URIEventResponse> uRIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, URIEventResponse>() {
            @Override
            public URIEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(URI_EVENT, log);
                URIEventResponse typedResponse = new URIEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<URIEventResponse> uRIEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(URI_EVENT));
        return uRIEventFlowable(filter);
    }

    public List<UnpausedEventResponse> getUnpausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnpausedEventResponse>() {
            @Override
            public UnpausedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSED_EVENT, log);
                UnpausedEventResponse typedResponse = new UnpausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> MINTER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINTER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> PAUSER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> RATE_DECIMALS() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_RATE_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> _buy(String seller, BigInteger token, BigInteger quantity) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC__BUY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, seller), 
                new org.web3j.abi.datatypes.generated.Uint256(token), 
                new org.web3j.abi.datatypes.generated.Uint256(quantity)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> _creatorProfiles(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__CREATORPROFILES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> _serviceFeeRate() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__SERVICEFEERATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> _wethContractAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__WETHCONTRACTADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> accept(String buyer, BigInteger token, BigInteger quantity, BigInteger price) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACCEPT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, buyer), 
                new org.web3j.abi.datatypes.generated.Uint256(token), 
                new org.web3j.abi.datatypes.generated.Uint256(quantity), 
                new org.web3j.abi.datatypes.generated.Uint256(price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account, BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> balanceOfBatch(List<String> accounts, List<BigInteger> ids) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(accounts, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> burn(String account, BigInteger id, BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burnBatch(String account, List<BigInteger> ids, List<BigInteger> values) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURNBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> creatorProfileOf(BigInteger token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CREATORPROFILEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(token)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> getRoleMember(byte[] role, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEMEMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getRoleMemberCount(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEMEMBERCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String account, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String to, BigInteger id, BigInteger amount, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintBatch(String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintWithCreatorFeeRate(String to, BigInteger token, BigInteger amount, BigInteger creatorFeeRate) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTWITHCREATORFEERATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(token), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.generated.Uint256(creatorFeeRate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(String from, String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger id, BigInteger amount, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> uri(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_URI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static TpulseContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TpulseContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TpulseContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TpulseContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TpulseContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TpulseContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TpulseContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TpulseContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TpulseContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String uri, BigInteger serviceFeeRate, String wethContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(uri), 
                new org.web3j.abi.datatypes.generated.Uint256(serviceFeeRate), 
                new org.web3j.abi.datatypes.Address(160, wethContractAddress)));
        return deployRemoteCall(TpulseContract.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<TpulseContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String uri, BigInteger serviceFeeRate, String wethContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(uri), 
                new org.web3j.abi.datatypes.generated.Uint256(serviceFeeRate), 
                new org.web3j.abi.datatypes.Address(160, wethContractAddress)));
        return deployRemoteCall(TpulseContract.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TpulseContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String uri, BigInteger serviceFeeRate, String wethContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(uri), 
                new org.web3j.abi.datatypes.generated.Uint256(serviceFeeRate), 
                new org.web3j.abi.datatypes.Address(160, wethContractAddress)));
        return deployRemoteCall(TpulseContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TpulseContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String uri, BigInteger serviceFeeRate, String wethContractAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(uri), 
                new org.web3j.abi.datatypes.generated.Uint256(serviceFeeRate), 
                new org.web3j.abi.datatypes.Address(160, wethContractAddress)));
        return deployRemoteCall(TpulseContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String account;

        public String operator;

        public Boolean approved;
    }

    public static class CreatorIncomeEventResponse extends BaseEventResponse {
        public String receiver;

        public BigInteger value;

        public byte[] currency;
    }

    public static class ExpenseEventResponse extends BaseEventResponse {
        public String receiver;

        public BigInteger value;

        public byte[] currency;
    }

    public static class IncomeEventResponse extends BaseEventResponse {
        public String receiver;

        public BigInteger value;

        public byte[] currency;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class ServiceIncomeEventResponse extends BaseEventResponse {
        public String receiver;

        public BigInteger value;

        public byte[] currency;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ids;

        public List<BigInteger> values;
    }

    public static class TransferSingleEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public BigInteger id;

        public BigInteger value;
    }

    public static class URIEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String value;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }
}
