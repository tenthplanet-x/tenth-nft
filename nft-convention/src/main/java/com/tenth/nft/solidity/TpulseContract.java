package com.tenth.nft.solidity;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class TpulseContract extends Contract {
    public static final String BINARY = "608060405260196006553480156200001657600080fd5b5060405162003773380380620037738339810160408190526200003991620002ba565b81806200004681620000d7565b506005805460ff191690556200005e600033620000e9565b6200008a7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633620000e9565b620000b67f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33620000e9565b50620000c233620000f5565b620000cd33620000f5565b60065550620004f9565b6004620000e582826200042d565b5050565b620000e582826200014f565b600580546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6200016682826200019260201b620010b71760201c565b60008281526001602090815260409091206200018d9183906200113b62000232821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000e5576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001ee3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000249836001600160a01b03841662000252565b90505b92915050565b60008181526001830160205260408120546200029b575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556200024c565b5060006200024c565b634e487b7160e01b600052604160045260246000fd5b60008060408385031215620002ce57600080fd5b82516001600160401b0380821115620002e657600080fd5b818501915085601f830112620002fb57600080fd5b815181811115620003105762000310620002a4565b604051601f8201601f19908116603f011681019083821181831017156200033b576200033b620002a4565b816040528281526020935088848487010111156200035857600080fd5b600091505b828210156200037c57848201840151818301850152908301906200035d565b828211156200038e5760008484830101525b969092015195979596505050505050565b600181811c90821680620003b457607f821691505b602082108103620003d557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200018d57600081815260208120601f850160051c81016020861015620004045750805b601f850160051c820191505b81811015620004255782815560010162000410565b505050505050565b81516001600160401b03811115620004495762000449620002a4565b62000461816200045a84546200039f565b84620003db565b602080601f831160018114620004995760008415620004805750858301515b600019600386901b1c1916600185901b17855562000425565b600085815260208120601f198616915b82811015620004ca57888601518255948401946001909101908401620004a9565b5085821015620004e95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61326a80620005096000396000f3fe6080604052600436106101e65760003560e01c8063731133e911610102578063ca15c87311610095578063e985e9c511610064578063e985e9c5146105de578063f242432a14610627578063f2fde38b14610647578063f5298aca1461066757600080fd5b8063ca15c87314610548578063d539139314610568578063d547741f1461058a578063e63ab1e9146105aa57600080fd5b806391d14854116100d157806391d14854146104e0578063a217fddf14610500578063a22cb46514610515578063bd86a21c1461053557600080fd5b8063731133e9146104545780638456cb59146104745780638da5cb5b146104895780639010d07c146104c057600080fd5b80632f2ff15d1161017a5780635c975abb116101495780635c975abb146103f45780636ac0ab8d1461040c5780636b20c4541461041f578063715018a61461043f57600080fd5b80632f2ff15d1461037257806336568abe146103925780633f4ba83a146103b25780634e1273f4146103c757600080fd5b8063147292ab116101b6578063147292ab146102e05780631f7fdffa14610302578063248a9ca3146103225780632eb2c2d61461035257600080fd5b8062fdd58e146101f257806301ffc9a7146102255780630560c5ef146102555780630e89341c146102b357600080fd5b366101ed57005b600080fd5b3480156101fe57600080fd5b5061021261020d366004612442565b610687565b6040519081526020015b60405180910390f35b34801561023157600080fd5b50610245610240366004612482565b610722565b604051901515815260200161021c565b34801561026157600080fd5b5061029461027036600461249f565b600090815260076020526040902080546001909101546001600160a01b0390911691565b604080516001600160a01b03909316835260208301919091520161021c565b3480156102bf57600080fd5b506102d36102ce36600461249f565b61072d565b60405161021c9190612510565b3480156102ec57600080fd5b506103006102fb3660046125d8565b6107c1565b005b34801561030e57600080fd5b5061030061031d3660046126d4565b61084c565b34801561032e57600080fd5b5061021261033d36600461249f565b60009081526020819052604090206001015490565b34801561035e57600080fd5b5061030061036d36600461276c565b610892565b34801561037e57600080fd5b5061030061038d366004612815565b6108de565b34801561039e57600080fd5b506103006103ad366004612815565b610908565b3480156103be57600080fd5b50610300610986565b3480156103d357600080fd5b506103e76103e2366004612841565b610a2c565b60405161021c9190612946565b34801561040057600080fd5b5060055460ff16610245565b61030061041a366004612959565b610b55565b34801561042b57600080fd5b5061030061043a366004612972565b610db8565b34801561044b57600080fd5b50610300610dfb565b34801561046057600080fd5b5061030061046f3660046129e5565b610e0d565b34801561048057600080fd5b50610300610e4d565b34801561049557600080fd5b5060055461010090046001600160a01b03165b6040516001600160a01b03909116815260200161021c565b3480156104cc57600080fd5b506104a86104db366004612a39565b610ef1565b3480156104ec57600080fd5b506102456104fb366004612815565b610f10565b34801561050c57600080fd5b50610212600081565b34801561052157600080fd5b50610300610530366004612a5b565b610f39565b610300610543366004612442565b610f44565b34801561055457600080fd5b5061021261056336600461249f565b610f7a565b34801561057457600080fd5b5061021260008051602061321583398151915281565b34801561059657600080fd5b506103006105a5366004612815565b610f91565b3480156105b657600080fd5b506102127f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b3480156105ea57600080fd5b506102456105f9366004612a97565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b34801561063357600080fd5b50610300610642366004612ac1565b610fb6565b34801561065357600080fd5b50610300610662366004612b25565b610ffb565b34801561067357600080fd5b50610300610682366004612b40565b611074565b60006001600160a01b0383166106f75760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b600061071c82611150565b60606004805461073c90612b73565b80601f016020809104026020016040519081016040528092919081815260200182805461076890612b73565b80156107b55780601f1061078a576101008083540402835291602001916107b5565b820191906000526020600020905b81548152906001019060200180831161079857829003601f168201915b50505050509050919050565b6107d960008051602061321583398151915233610f10565b6107f55760405162461bcd60e51b81526004016106ee90612ba7565b61080185858585611190565b6040805180820182526001600160a01b03968716815260208082019384526000968752600790529420935184546001600160a01b031916951694909417835550509051600190910155565b61086460008051602061321583398151915233610f10565b6108805760405162461bcd60e51b81526004016106ee90612ba7565b61088c8484848461127b565b50505050565b6001600160a01b0385163314806108ae57506108ae85336105f9565b6108ca5760405162461bcd60e51b81526004016106ee90612c04565b6108d785858585856113d6565b5050505050565b6000828152602081905260409020600101546108f981611583565b610903838361158d565b505050565b6001600160a01b03811633146109785760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016106ee565b61098282826115af565b5050565b6109b07f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610f10565b610a225760405162461bcd60e51b815260206004820152603b60248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652070617573657220726f6c6520746f20756e7061757365000000000060648201526084016106ee565b610a2a6115d1565b565b60608151835114610a915760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016106ee565b600083516001600160401b03811115610aac57610aac612523565b604051908082528060200260200182016040528015610ad5578160200160208202803683370190505b50905060005b8451811015610b4d57610b20858281518110610af957610af9612c53565b6020026020010151858381518110610b1357610b13612c53565b6020026020010151610687565b828281518110610b3257610b32612c53565b6020908102919091010152610b4681612c7f565b9050610adb565b509392505050565b610b60600036611623565b816060013514610ba45760405162461bcd60e51b815260206004820152600f60248201526e496c6c6567616c206c697374696e6760881b60448201526064016106ee565b6060610bc7610bb66020840184612b25565b33846020013585604001358561169d565b6000606460065434610bd99190612c98565b610be39190612cb7565b6020808501356000908152600782526040808220815180830190925280546001600160a01b031682526001015492810183905292935090606490610c279034612c98565b610c319190612cb7565b9050600081610c408534612cd9565b610c4a9190612cd9565b9050610c62610c5c6020880188612b25565b82610f44565b7f0d2e009b696be50eaeafa43283c2e91362ec7d038b2af93783ec767d536ad278610c906020880188612b25565b604080516001600160a01b039092168252602082018490520160405180910390a1600554610ccc9061010090046001600160a01b031685610f44565b6005547fe7a715e620bb82038ca488528d5d483e1353aa0e959b1ba680dea611f191221a9061010090046001600160a01b0316604080516001600160a01b039092168252602082018790520160405180910390a18115610d78578251610d329083610f44565b8251604080516001600160a01b039092168252602082018490527fb705b5a7ff7f4f70bdf2aa8c5b49b8b76ba80e49b70bd479ae4dcd2b7d7ccf4f910160405180910390a15b604080513381523460208201527f875403035824b20b1a4122c77ab89723c05ef77aead7b66b5a23696e25743ecf910160405180910390a1505050505050565b6001600160a01b038316331480610dd45750610dd483336105f9565b610df05760405162461bcd60e51b81526004016106ee90612c04565b6109038383836117d9565b610e03611978565b610a2a60006119d8565b610e2560008051602061321583398151915233610f10565b610e415760405162461bcd60e51b81526004016106ee90612ba7565b61088c84848484611190565b610e777f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33610f10565b610ee95760405162461bcd60e51b815260206004820152603960248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652070617573657220726f6c6520746f2070617573650000000000000060648201526084016106ee565b610a2a611a32565b6000828152600160205260408120610f099083611a6f565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b610982338383611a7b565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015610903573d6000803e3d6000fd5b600081815260016020526040812061071c90611b5b565b600082815260208190526040902060010154610fac81611583565b61090383836115af565b6001600160a01b038516331480610fd25750610fd285336105f9565b610fee5760405162461bcd60e51b81526004016106ee90612c04565b6108d7858585858561169d565b611003611978565b6001600160a01b0381166110685760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ee565b611071816119d8565b50565b6001600160a01b038316331480611090575061109083336105f9565b6110ac5760405162461bcd60e51b81526004016106ee90612c04565b610903838383611b65565b6110c18282610f10565b610982576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556110f73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610f09836001600160a01b038416611c81565b60006001600160e01b03198216636cdb3d1360e11b148061118157506001600160e01b031982166303a24d0760e21b145b8061071c575061071c82611cd0565b6001600160a01b0384166111b65760405162461bcd60e51b81526004016106ee90612cf0565b3360006111c285611cf5565b905060006111cf85611cf5565b90506111e083600089858589611d40565b60008681526002602090815260408083206001600160a01b038b16845290915281208054879290611212908490612d31565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461127283600089898989611d4e565b50505050505050565b6001600160a01b0384166112a15760405162461bcd60e51b81526004016106ee90612cf0565b81518351146112c25760405162461bcd60e51b81526004016106ee90612d49565b336112d281600087878787611d40565b60005b845181101561136e578381815181106112f0576112f0612c53565b60200260200101516002600087848151811061130e5761130e612c53565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546113569190612d31565b9091555081905061136681612c7f565b9150506112d5565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516113bf929190612d91565b60405180910390a46108d781600087878787611ea9565b81518351146113f75760405162461bcd60e51b81526004016106ee90612d49565b6001600160a01b03841661141d5760405162461bcd60e51b81526004016106ee90612dbf565b3361142c818787878787611d40565b60005b845181101561151557600085828151811061144c5761144c612c53565b60200260200101519050600085838151811061146a5761146a612c53565b60209081029190910181015160008481526002835260408082206001600160a01b038e1683529093529190912054909150818110156114bb5760405162461bcd60e51b81526004016106ee90612e04565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b168252812080548492906114fa908490612d31565b925050819055505050508061150e90612c7f565b905061142f565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611565929190612d91565b60405180910390a461157b818787878787611ea9565b505050505050565b6110718133611f64565b61159782826110b7565b6000828152600160205260409020610903908261113b565b6115b98282611fc8565b6000828152600160205260409020610903908261202d565b6115d9612042565b6005805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60008060005b83811015610b4d5761163c816001612d31565b6116469085612cd9565b611651906008612c98565b61165c906002612f32565b85858381811061166e5761166e612c53565b61167f9392013560f81c9050612c98565b6116899083612d31565b91508061169581612c7f565b915050611629565b6001600160a01b0384166116c35760405162461bcd60e51b81526004016106ee90612dbf565b3360006116cf85611cf5565b905060006116dc85611cf5565b90506116ec838989858589611d40565b60008681526002602090815260408083206001600160a01b038c1684529091529020548581101561172f5760405162461bcd60e51b81526004016106ee90612e04565b60008781526002602090815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061176e908490612d31565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46117ce848a8a8a8a8a611d4e565b505050505050505050565b6001600160a01b0383166117ff5760405162461bcd60e51b81526004016106ee90612f3e565b80518251146118205760405162461bcd60e51b81526004016106ee90612d49565b600033905061184381856000868660405180602001604052806000815250611d40565b60005b835181101561190b57600084828151811061186357611863612c53565b60200260200101519050600084838151811061188157611881612c53565b60209081029190910181015160008481526002835260408082206001600160a01b038c1683529093529190912054909150818110156118d25760405162461bcd60e51b81526004016106ee90612f81565b60009283526002602090815260408085206001600160a01b038b168652909152909220910390558061190381612c7f565b915050611846565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161195c929190612d91565b60405180910390a460408051602081019091526000905261088c565b6005546001600160a01b03610100909104163314610a2a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106ee565b600580546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611a3a61208b565b6005805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116063390565b6000610f0983836120d1565b816001600160a01b0316836001600160a01b031603611aee5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016106ee565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600061071c825490565b6001600160a01b038316611b8b5760405162461bcd60e51b81526004016106ee90612f3e565b336000611b9784611cf5565b90506000611ba484611cf5565b9050611bc483876000858560405180602001604052806000815250611d40565b60008581526002602090815260408083206001600160a01b038a16845290915290205484811015611c075760405162461bcd60e51b81526004016106ee90612f81565b60008681526002602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052611272565b6000818152600183016020526040812054611cc85750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561071c565b50600061071c565b60006001600160e01b03198216635a05180f60e01b148061071c575061071c826120fb565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611d2f57611d2f612c53565b602090810291909101015292915050565b61157b868686868686612130565b6001600160a01b0384163b1561157b5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611d929089908990889088908890600401612fc5565b6020604051808303816000875af1925050508015611dcd575060408051601f3d908101601f19168201909252611dca9181019061300a565b60015b611e7957611dd9613027565b806308c379a003611e125750611ded613043565b80611df85750611e14565b8060405162461bcd60e51b81526004016106ee9190612510565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016106ee565b6001600160e01b0319811663f23a6e6160e01b146112725760405162461bcd60e51b81526004016106ee906130cc565b6001600160a01b0384163b1561157b5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611eed9089908990889088908890600401613114565b6020604051808303816000875af1925050508015611f28575060408051601f3d908101601f19168201909252611f259181019061300a565b60015b611f3457611dd9613027565b6001600160e01b0319811663bc197c8160e01b146112725760405162461bcd60e51b81526004016106ee906130cc565b611f6e8282610f10565b61098257611f86816001600160a01b03166014612198565b611f91836020612198565b604051602001611fa2929190613172565b60408051601f198184030181529082905262461bcd60e51b82526106ee91600401612510565b611fd28282610f10565b15610982576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610f09836001600160a01b038416612333565b60055460ff16610a2a5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106ee565b60055460ff1615610a2a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016106ee565b60008260000182815481106120e8576120e8612c53565b9060005260206000200154905092915050565b60006001600160e01b03198216637965db0b60e01b148061071c57506301ffc9a760e01b6001600160e01b031983161461071c565b60055460ff161561157b5760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201526b1dda1a5b19481c185d5cd95960a21b60648201526084016106ee565b606060006121a7836002612c98565b6121b2906002612d31565b6001600160401b038111156121c9576121c9612523565b6040519080825280601f01601f1916602001820160405280156121f3576020820181803683370190505b509050600360fc1b8160008151811061220e5761220e612c53565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061223d5761223d612c53565b60200101906001600160f81b031916908160001a9053506000612261846002612c98565b61226c906001612d31565b90505b60018111156122e4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106122a0576122a0612c53565b1a60f81b8282815181106122b6576122b6612c53565b60200101906001600160f81b031916908160001a90535060049490941c936122dd816131e7565b905061226f565b508315610f095760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106ee565b6000818152600183016020526040812054801561241c576000612357600183612cd9565b855490915060009061236b90600190612cd9565b90508181146123d057600086600001828154811061238b5761238b612c53565b90600052602060002001549050808760000184815481106123ae576123ae612c53565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806123e1576123e16131fe565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061071c565b600091505061071c565b80356001600160a01b038116811461243d57600080fd5b919050565b6000806040838503121561245557600080fd5b61245e83612426565b946020939093013593505050565b6001600160e01b03198116811461107157600080fd5b60006020828403121561249457600080fd5b8135610f098161246c565b6000602082840312156124b157600080fd5b5035919050565b60005b838110156124d35781810151838201526020016124bb565b8381111561088c5750506000910152565b600081518084526124fc8160208601602086016124b8565b601f01601f19169290920160200192915050565b602081526000610f0960208301846124e4565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561255e5761255e612523565b6040525050565b600082601f83011261257657600080fd5b81356001600160401b0381111561258f5761258f612523565b6040516125a6601f8301601f191660200182612539565b8181528460208386010111156125bb57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156125f057600080fd5b6125f986612426565b9450602086013593506040860135925060608601356001600160401b0381111561262257600080fd5b61262e88828901612565565b95989497509295608001359392505050565b60006001600160401b0382111561265957612659612523565b5060051b60200190565b600082601f83011261267457600080fd5b8135602061268182612640565b60405161268e8282612539565b83815260059390931b85018201928281019150868411156126ae57600080fd5b8286015b848110156126c957803583529183019183016126b2565b509695505050505050565b600080600080608085870312156126ea57600080fd5b6126f385612426565b935060208501356001600160401b038082111561270f57600080fd5b61271b88838901612663565b9450604087013591508082111561273157600080fd5b61273d88838901612663565b9350606087013591508082111561275357600080fd5b5061276087828801612565565b91505092959194509250565b600080600080600060a0868803121561278457600080fd5b61278d86612426565b945061279b60208701612426565b935060408601356001600160401b03808211156127b757600080fd5b6127c389838a01612663565b945060608801359150808211156127d957600080fd5b6127e589838a01612663565b935060808801359150808211156127fb57600080fd5b5061280888828901612565565b9150509295509295909350565b6000806040838503121561282857600080fd5b8235915061283860208401612426565b90509250929050565b6000806040838503121561285457600080fd5b82356001600160401b038082111561286b57600080fd5b818501915085601f83011261287f57600080fd5b8135602061288c82612640565b6040516128998282612539565b83815260059390931b85018201928281019150898411156128b957600080fd5b948201945b838610156128de576128cf86612426565b825294820194908201906128be565b965050860135925050808211156128f457600080fd5b5061290185828601612663565b9150509250929050565b600081518084526020808501945080840160005b8381101561293b5781518752958201959082019060010161291f565b509495945050505050565b602081526000610f09602083018461290b565b6000610100828403121561296c57600080fd5b50919050565b60008060006060848603121561298757600080fd5b61299084612426565b925060208401356001600160401b03808211156129ac57600080fd5b6129b887838801612663565b935060408601359150808211156129ce57600080fd5b506129db86828701612663565b9150509250925092565b600080600080608085870312156129fb57600080fd5b612a0485612426565b9350602085013592506040850135915060608501356001600160401b03811115612a2d57600080fd5b61276087828801612565565b60008060408385031215612a4c57600080fd5b50508035926020909101359150565b60008060408385031215612a6e57600080fd5b612a7783612426565b915060208301358015158114612a8c57600080fd5b809150509250929050565b60008060408385031215612aaa57600080fd5b612ab383612426565b915061283860208401612426565b600080600080600060a08688031215612ad957600080fd5b612ae286612426565b9450612af060208701612426565b9350604086013592506060860135915060808601356001600160401b03811115612b1957600080fd5b61280888828901612565565b600060208284031215612b3757600080fd5b610f0982612426565b600080600060608486031215612b5557600080fd5b612b5e84612426565b95602085013595506040909401359392505050565b600181811c90821680612b8757607f821691505b60208210810361296c57634e487b7160e01b600052602260045260246000fd5b60208082526038908201527f455243313135355072657365744d696e7465725061757365723a206d7573742060408201527f68617665206d696e74657220726f6c6520746f206d696e740000000000000000606082015260800190565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612c9157612c91612c69565b5060010190565b6000816000190483118215151615612cb257612cb2612c69565b500290565b600082612cd457634e487b7160e01b600052601260045260246000fd5b500490565b600082821015612ceb57612ceb612c69565b500390565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60008219821115612d4457612d44612c69565b500190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b604081526000612da4604083018561290b565b8281036020840152612db6818561290b565b95945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b600181815b80851115612e89578160001904821115612e6f57612e6f612c69565b80851615612e7c57918102915b93841c9390800290612e53565b509250929050565b600082612ea05750600161071c565b81612ead5750600061071c565b8160018114612ec35760028114612ecd57612ee9565b600191505061071c565b60ff841115612ede57612ede612c69565b50506001821b61071c565b5060208310610133831016604e8410600b8410161715612f0c575081810a61071c565b612f168383612e4e565b8060001904821115612f2a57612f2a612c69565b029392505050565b6000610f098383612e91565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612fff908301846124e4565b979650505050505050565b60006020828403121561301c57600080fd5b8151610f098161246c565b600060033d11156130405760046000803e5060005160e01c5b90565b600060443d10156130515790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561308057505050505090565b82850191508151818111156130985750505050505090565b843d87010160208285010111156130b25750505050505090565b6130c160208286010187612539565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906131409083018661290b565b8281036060840152613152818661290b565b9050828103608084015261316681856124e4565b98975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516131aa8160178501602088016124b8565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516131db8160288401602088016124b8565b01602801949350505050565b6000816131f6576131f6612c69565b506000190190565b634e487b7160e01b600052603160045260246000fdfe9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a2646970667358221220257b235645d9f83b0d0959de33f6c36017ccb53e9f3bf7c6d5646a08ce7f912364736f6c634300080f0033";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_MINTER_ROLE = "MINTER_ROLE";

    public static final String FUNC_PAUSER_ROLE = "PAUSER_ROLE";

    public static final String FUNC__PAYFOR = "_payFor";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_BURNBATCH = "burnBatch";

    public static final String FUNC_BUY = "buy";

    public static final String FUNC_CREATORPROFILEOF = "creatorProfileOf";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GETROLEMEMBER = "getRoleMember";

    public static final String FUNC_GETROLEMEMBERCOUNT = "getRoleMemberCount";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_MINTBATCH = "mintBatch";

    public static final String FUNC_MINTWITHCREATORFEERATE = "mintWithCreatorFeeRate";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAUSE = "pause";

    public static final String FUNC_PAUSED = "paused";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UNPAUSE = "unpause";

    public static final String FUNC_URI = "uri";

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event CREATORINCOME_EVENT = new Event("CreatorIncome", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EXPENSE_EVENT = new Event("Expense", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event INCOME_EVENT = new Event("Income", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAUSED_EVENT = new Event("Paused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SERVICEINCOME_EVENT = new Event("ServiceIncome", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event URI_EVENT = new Event("URI", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event UNPAUSED_EVENT = new Event("Unpaused", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected TpulseContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TpulseContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TpulseContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TpulseContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<CreatorIncomeEventResponse> getCreatorIncomeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATORINCOME_EVENT, transactionReceipt);
        ArrayList<CreatorIncomeEventResponse> responses = new ArrayList<CreatorIncomeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreatorIncomeEventResponse typedResponse = new CreatorIncomeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CreatorIncomeEventResponse> creatorIncomeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CreatorIncomeEventResponse>() {
            @Override
            public CreatorIncomeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CREATORINCOME_EVENT, log);
                CreatorIncomeEventResponse typedResponse = new CreatorIncomeEventResponse();
                typedResponse.log = log;
                typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CreatorIncomeEventResponse> creatorIncomeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CREATORINCOME_EVENT));
        return creatorIncomeEventFlowable(filter);
    }

    public List<ExpenseEventResponse> getExpenseEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(EXPENSE_EVENT, transactionReceipt);
        ArrayList<ExpenseEventResponse> responses = new ArrayList<ExpenseEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ExpenseEventResponse typedResponse = new ExpenseEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ExpenseEventResponse> expenseEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ExpenseEventResponse>() {
            @Override
            public ExpenseEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(EXPENSE_EVENT, log);
                ExpenseEventResponse typedResponse = new ExpenseEventResponse();
                typedResponse.log = log;
                typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ExpenseEventResponse> expenseEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXPENSE_EVENT));
        return expenseEventFlowable(filter);
    }

    public List<IncomeEventResponse> getIncomeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INCOME_EVENT, transactionReceipt);
        ArrayList<IncomeEventResponse> responses = new ArrayList<IncomeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            IncomeEventResponse typedResponse = new IncomeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<IncomeEventResponse> incomeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, IncomeEventResponse>() {
            @Override
            public IncomeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(INCOME_EVENT, log);
                IncomeEventResponse typedResponse = new IncomeEventResponse();
                typedResponse.log = log;
                typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<IncomeEventResponse> incomeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(INCOME_EVENT));
        return incomeEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<PausedEventResponse> getPausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAUSED_EVENT, transactionReceipt);
        ArrayList<PausedEventResponse> responses = new ArrayList<PausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PausedEventResponse typedResponse = new PausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PausedEventResponse>() {
            @Override
            public PausedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAUSED_EVENT, log);
                PausedEventResponse typedResponse = new PausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PausedEventResponse> pausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAUSED_EVENT));
        return pausedEventFlowable(filter);
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleAdminChangedEventResponse>() {
            @Override
            public RoleAdminChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
                RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleGrantedEventResponse>() {
            @Override
            public RoleGrantedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEGRANTED_EVENT, log);
                RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleRevokedEventResponse>() {
            @Override
            public RoleRevokedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREVOKED_EVENT, log);
                RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public List<ServiceIncomeEventResponse> getServiceIncomeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SERVICEINCOME_EVENT, transactionReceipt);
        ArrayList<ServiceIncomeEventResponse> responses = new ArrayList<ServiceIncomeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ServiceIncomeEventResponse typedResponse = new ServiceIncomeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ServiceIncomeEventResponse> serviceIncomeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ServiceIncomeEventResponse>() {
            @Override
            public ServiceIncomeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SERVICEINCOME_EVENT, log);
                ServiceIncomeEventResponse typedResponse = new ServiceIncomeEventResponse();
                typedResponse.log = log;
                typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ServiceIncomeEventResponse> serviceIncomeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SERVICEINCOME_EVENT));
        return serviceIncomeEventFlowable(filter);
    }

    public List<TransferBatchEventResponse> getTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ids = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.values = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferBatchEventResponse>() {
            @Override
            public TransferBatchEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERBATCH_EVENT, log);
                TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.ids = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.values = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferBatchEventResponse> transferBatchEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERBATCH_EVENT));
        return transferBatchEventFlowable(filter);
    }

    public List<TransferSingleEventResponse> getTransferSingleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferSingleEventResponse>() {
            @Override
            public TransferSingleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, log);
                TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferSingleEventResponse> transferSingleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFERSINGLE_EVENT));
        return transferSingleEventFlowable(filter);
    }

    public List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(URI_EVENT, transactionReceipt);
        ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            URIEventResponse typedResponse = new URIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<URIEventResponse> uRIEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, URIEventResponse>() {
            @Override
            public URIEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(URI_EVENT, log);
                URIEventResponse typedResponse = new URIEventResponse();
                typedResponse.log = log;
                typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<URIEventResponse> uRIEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(URI_EVENT));
        return uRIEventFlowable(filter);
    }

    public List<UnpausedEventResponse> getUnpausedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNPAUSED_EVENT, transactionReceipt);
        ArrayList<UnpausedEventResponse> responses = new ArrayList<UnpausedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnpausedEventResponse typedResponse = new UnpausedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnpausedEventResponse>() {
            @Override
            public UnpausedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UNPAUSED_EVENT, log);
                UnpausedEventResponse typedResponse = new UnpausedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UnpausedEventResponse> unpausedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNPAUSED_EVENT));
        return unpausedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> MINTER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINTER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> PAUSER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> _payFor(String user, BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC__PAYFOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, user), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String account, BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<List> balanceOfBatch(List<String> accounts, List<BigInteger> ids) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOFBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(accounts, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> burn(String account, BigInteger id, BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> burnBatch(String account, List<BigInteger> ids, List<BigInteger> values) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURNBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(values, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> buy(Listing listing) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUY, 
                Arrays.<Type>asList(listing), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> creatorProfileOf(BigInteger id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CREATORPROFILEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<String> getRoleMember(byte[] role, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEMEMBER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getRoleMemberCount(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEMEMBERCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String account, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, account), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(String to, BigInteger id, BigInteger amount, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintBatch(String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTBATCH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mintWithCreatorFeeRate(String to, BigInteger id, BigInteger amount, byte[] data, BigInteger creatorFeeRate) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTWITHCREATORFEERATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.DynamicBytes(data), 
                new org.web3j.abi.datatypes.generated.Uint256(creatorFeeRate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> pause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> paused() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeBatchTransferFrom(String from, String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(ids, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(amounts, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger id, BigInteger amount, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(id), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unpause() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNPAUSE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> uri(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_URI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static TpulseContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TpulseContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TpulseContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TpulseContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TpulseContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TpulseContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TpulseContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TpulseContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TpulseContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String uri, BigInteger serviceFeeRate) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(uri), 
                new org.web3j.abi.datatypes.generated.Uint256(serviceFeeRate)));
        return deployRemoteCall(TpulseContract.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<TpulseContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String uri, BigInteger serviceFeeRate) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(uri), 
                new org.web3j.abi.datatypes.generated.Uint256(serviceFeeRate)));
        return deployRemoteCall(TpulseContract.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TpulseContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String uri, BigInteger serviceFeeRate) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(uri), 
                new org.web3j.abi.datatypes.generated.Uint256(serviceFeeRate)));
        return deployRemoteCall(TpulseContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TpulseContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String uri, BigInteger serviceFeeRate) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(uri), 
                new org.web3j.abi.datatypes.generated.Uint256(serviceFeeRate)));
        return deployRemoteCall(TpulseContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class Signature extends StaticStruct {
        public byte[] hash;

        public BigInteger v;

        public byte[] r;

        public byte[] s;

        public Signature(byte[] hash, BigInteger v, byte[] r, byte[] s) {
            super(new org.web3j.abi.datatypes.generated.Bytes32(hash),new org.web3j.abi.datatypes.generated.Uint8(v),new org.web3j.abi.datatypes.generated.Bytes32(r),new org.web3j.abi.datatypes.generated.Bytes32(s));
            this.hash = hash;
            this.v = v;
            this.r = r;
            this.s = s;
        }

        public Signature(Bytes32 hash, Uint8 v, Bytes32 r, Bytes32 s) {
            super(hash,v,r,s);
            this.hash = hash.getValue();
            this.v = v.getValue();
            this.r = r.getValue();
            this.s = s.getValue();
        }
    }

    public static class Listing extends StaticStruct {
        public String seller;

        public BigInteger assetsId;

        public BigInteger quality;

        public BigInteger amount;

        public Signature signature;

        public Listing(String seller, BigInteger assetsId, BigInteger quality, BigInteger amount, Signature signature) {
            super(new org.web3j.abi.datatypes.Address(seller),new org.web3j.abi.datatypes.generated.Uint256(assetsId),new org.web3j.abi.datatypes.generated.Uint256(quality),new org.web3j.abi.datatypes.generated.Uint256(amount),signature);
            this.seller = seller;
            this.assetsId = assetsId;
            this.quality = quality;
            this.amount = amount;
            this.signature = signature;
        }

        public Listing(Address seller, Uint256 assetsId, Uint256 quality, Uint256 amount, Signature signature) {
            super(seller,assetsId,quality,amount,signature);
            this.seller = seller.getValue();
            this.assetsId = assetsId.getValue();
            this.quality = quality.getValue();
            this.amount = amount.getValue();
            this.signature = signature;
        }
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String account;

        public String operator;

        public Boolean approved;
    }

    public static class CreatorIncomeEventResponse extends BaseEventResponse {
        public String receiver;

        public BigInteger value;
    }

    public static class ExpenseEventResponse extends BaseEventResponse {
        public String receiver;

        public BigInteger value;
    }

    public static class IncomeEventResponse extends BaseEventResponse {
        public String receiver;

        public BigInteger value;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class PausedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class ServiceIncomeEventResponse extends BaseEventResponse {
        public String receiver;

        public BigInteger value;
    }

    public static class TransferBatchEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ids;

        public List<BigInteger> values;
    }

    public static class TransferSingleEventResponse extends BaseEventResponse {
        public String operator;

        public String from;

        public String to;

        public BigInteger id;

        public BigInteger value;
    }

    public static class URIEventResponse extends BaseEventResponse {
        public BigInteger id;

        public String value;
    }

    public static class UnpausedEventResponse extends BaseEventResponse {
        public String account;
    }
}
